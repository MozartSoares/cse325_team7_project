@page "/movies/{Id}"
@using cse325_team7_project.Api.DTOs
@inject HttpClient Http
@inject NavigationManager Nav

<div class="movie-details-container">
    @if (!loadAttempted)
    {
        <p>Loading movie...</p>
    }
    else if (Movie == null)
    {
        <p>Movie not found.</p>
    }
    else
    {
        <div class="movie-details-card movie-details">
            <div class="movie-details-image">
                <img src="@Movie.Image" alt="@Movie.Title" />
            </div>

            <div class="movie-details-info">
                <div class="movie-details-header">
                    <h2 class="mb-1">@Movie.Title</h2>
                    @if (isUsingPlaceholderData)
                    {
                        <span class="muted">(Demo Data)</span>
                    }
                </div>

                @* <p class="movie-details-meta">Id: <code>@Movie.Id</code></p> *@
                <p class="movie-details-meta">Release: @Movie.ReleaseDate.ToString("MMMM d, yyyy")</p>
                <p class="movie-details-meta">Genre: @Movie.Genre.ToString()</p>
                <p class="movie-details-meta">Studio: @Movie.Studio</p>
                <p class="movie-details-budget">Budget: $@Movie.Budget.ToString("N0")</p>

                <div class="movie-details-description">@Movie.Description</div>

                @if (Movie.Cast != null && Movie.Cast.Count > 0)
                {
                    <h4 class="mt-3">Cast</h4>
                    <ul class="movie-cast-list">
                        @foreach (var c in Movie.Cast)
                        {
                            <li>@c.Name (@c.Role.ToString())</li>
                        }
                    </ul>
                }

                <div class="mt-3">
                    <a class="btn btn-secondary" href="/" role="button">Back</a>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private MovieResponseDto? Movie;
    private bool isUsingPlaceholderData = false;
    private bool loadAttempted = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Movie = await Http.GetFromJsonAsync<MovieResponseDto>(Nav.ToAbsoluteUri($"api/movies/{Id}"));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading movie {Id}: {ex.Message}");
        }

        // If API didn't return a movie (or API not available), try placeholder/demo data
        if (Movie == null)
        {
            var placeholders = GetPlaceholderMovies();
            Movie = placeholders.FirstOrDefault(m => m.Id == Id);
            if (Movie != null)
            {
                isUsingPlaceholderData = true;
            }
        }

        loadAttempted = true;
    }

    private void GoBack()
    {
        Nav.NavigateTo("/movies");
    }

    private List<MovieResponseDto> GetPlaceholderMovies()
    {
        return new List<MovieResponseDto>
        {
            new MovieResponseDto(
                "1", "The Matrix", new DateOnly(1999, 3, 31), Domain.Enums.Genre.ScienceFiction,
                "A computer programmer discovers reality is a simulation and joins a rebellion against machines.",
                "Warner Bros", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/0066cc/ffffff?text=The+Matrix",
                "https://via.placeholder.com/200x300/0066cc/ffffff?text=Matrix",
                63000000m, DateTime.UtcNow.AddDays(-30), DateTime.UtcNow.AddDays(-30)
            ),
            new MovieResponseDto(
                "2", "Inception", new DateOnly(2010, 7, 16), Domain.Enums.Genre.ScienceFiction,
                "A thief who steals corporate secrets through dream-sharing technology is given the inverse task of planting an idea.",
                "Warner Bros", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/cc6600/ffffff?text=Inception",
                "https://via.placeholder.com/200x300/cc6600/ffffff?text=Inception",
                160000000m, DateTime.UtcNow.AddDays(-25), DateTime.UtcNow.AddDays(-25)
            ),
            new MovieResponseDto(
                "3", "The Dark Knight", new DateOnly(2008, 7, 18), Domain.Enums.Genre.Action,
                "Batman faces the Joker, a criminal mastermind who wants to plunge Gotham City into anarchy.",
                "Warner Bros", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/333333/ffffff?text=Dark+Knight",
                "https://via.placeholder.com/200x300/333333/ffffff?text=Batman",
                185000000m, DateTime.UtcNow.AddDays(-20), DateTime.UtcNow.AddDays(-20)
            ),
            new MovieResponseDto(
                "4", "Pulp Fiction", new DateOnly(1994, 10, 14), Domain.Enums.Genre.Crime,
                "The lives of two mob hitmen, a boxer, and others intertwine in four tales of violence and redemption.",
                "Miramax", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/990000/ffffff?text=Pulp+Fiction",
                "https://via.placeholder.com/200x300/990000/ffffff?text=Pulp",
                8500000m, DateTime.UtcNow.AddDays(-15), DateTime.UtcNow.AddDays(-15)
            ),
            new MovieResponseDto(
                "5", "The Shawshank Redemption", new DateOnly(1994, 9, 23), Domain.Enums.Genre.Drama,
                "Two imprisoned men bond over years, finding solace and eventual redemption through acts of common decency.",
                "Columbia Pictures", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/006600/ffffff?text=Shawshank",
                "https://via.placeholder.com/200x300/006600/ffffff?text=Shawshank",
                25000000m, DateTime.UtcNow.AddDays(-10), DateTime.UtcNow.AddDays(-10)
            ),
            new MovieResponseDto(
                "6", "Forrest Gump", new DateOnly(1994, 7, 6), Domain.Enums.Genre.Drama,
                "The presidencies of Kennedy and Johnson through the eyes of an Alabama man with an IQ of 75.",
                "Paramount Pictures", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/0099cc/ffffff?text=Forrest+Gump",
                "https://via.placeholder.com/200x300/0099cc/ffffff?text=Forrest",
                55000000m, DateTime.UtcNow.AddDays(-5), DateTime.UtcNow.AddDays(-5)
            ),
            new MovieResponseDto(
                "7", "Avatar", new DateOnly(2009, 12, 18), Domain.Enums.Genre.ScienceFiction,
                "A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following orders and protecting an alien civilization.",
                "20th Century Fox", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/0066ff/ffffff?text=Avatar",
                "https://via.placeholder.com/200x300/0066ff/ffffff?text=Avatar",
                237000000m, DateTime.UtcNow.AddDays(-3), DateTime.UtcNow.AddDays(-3)
            ),
            new MovieResponseDto(
                "8", "Titanic", new DateOnly(1997, 12, 19), Domain.Enums.Genre.Romance,
                "A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.",
                "Paramount Pictures", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/003366/ffffff?text=Titanic",
                "https://via.placeholder.com/200x300/003366/ffffff?text=Titanic",
                200000000m, DateTime.UtcNow.AddDays(-2), DateTime.UtcNow.AddDays(-2)
            ),
            new MovieResponseDto(
                "9", "The Lion King", new DateOnly(1994, 6, 24), Domain.Enums.Genre.Animation,
                "A young lion prince flees his kingdom only to learn the true meaning of responsibility and bravery.",
                "Walt Disney Pictures", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/ff9900/ffffff?text=Lion+King",
                "https://via.placeholder.com/200x300/ff9900/ffffff?text=Lion",
                45000000m, DateTime.UtcNow.AddDays(-1), DateTime.UtcNow.AddDays(-1)
            ),
            new MovieResponseDto(
                "10", "Jurassic Park", new DateOnly(1993, 6, 11), Domain.Enums.Genre.Adventure,
                "A pragmatic paleontologist visiting an almost complete theme park is tasked with protecting a couple of kids after a power failure causes the park's cloned dinosaurs to run loose.",
                "Universal Pictures", new List<cse325_team7_project.Domain.ValueObjects.CastMember>(),
                "https://via.placeholder.com/400x600/669900/ffffff?text=Jurassic+Park",
                "https://via.placeholder.com/200x300/669900/ffffff?text=Jurassic",
                63000000m, DateTime.UtcNow, DateTime.UtcNow
            )
        };
    }
}