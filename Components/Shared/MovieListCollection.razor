@using cse325_team7_project.Api.DTOs
@using cse325_team7_project.Domain.Enums
@using cse325_team7_project.Domain.ValueObjects
@inject HttpClient HttpClient
@inject NavigationManager Nav


@*
    Displays a loading message if the movie list or all movies are not yet loaded.
    Otherwise, renders the movie list container with its title, a copy button,
    and a grid of movie cards for each movie in the list.
*@
@if (movieList == null || allMovies == null)
{
    <p>Loading list...</p>
}
else
{
    <div class="movie-list-container">
        <div class="movie-list-header">
            <span>@movieList.Title</span>
            <div class="list-action-buttons">
                <button class="list-red-button" @onclick="ShowDeleteModal">Delete</button>
                <button class="list-blue-button" @onclick="ShowEditModal">Edit</button>
                <button class="list-blue-button" @onclick="Share">Share</button>
            </div>
        </div>

        <div class="movie-list">
            @*
                Iterates through each movie ID in the list.
                For each ID, finds the matching movie in allMovies and renders a MovieItem component.
            *@
            @if (movieList.Movies != null && movieList.Movies.Any())
            {
                @foreach (var id in movieList.Movies)
                {
                    // Check if the movie ID matches any of the IDs in allMovies
                    var movie = allMovies.FirstOrDefault(m => m.Id == id);
                    if (movie != null) // Only render the MovieItem if there's a match
                    {
                        <MovieItem movie=@movie />
                    }
                }
            }
            else 
            {
                <p>There are no movies in the list.</p>
            }
        </div>
    </div>

    <Modal Title="Confirmation" AcceptText="Confirm" Show="@deleteModalVisible" OnDecline="CloseDeleteModal" OnAccept="HandleDeleteSubmit">
        <p>Do you want to detele the list "@movieList.Title"?</p>
    </Modal>

    <Modal Title="Edit List" Show="@editModalVisible" OnDecline="CloseEditModal">
        @if (listUpdateDto != null)
        {
            <EditForm EditContext="@editContext" OnValidSubmit="HandleEditSubmit">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="listUpdateDto.Title" class="form-control" />
                    <ValidationMessage For="@(() => listUpdateDto.Title)" />
                </div>
                <button type="submit" class="btn btn-primary" disabled="@isChanged">Save</button>
            </EditForm>
        }
    </Modal>
}

@code {
    /// <summary>
    /// Gets or sets the ID of the movie list to display.
    /// </summary>
    /// <value>
    /// The unique identifier for the movie list, passed as a parameter.
    /// </value>
    [Parameter]
    public string? movieListId { get; set; }

    /// <summary>
    /// Stores the full list of movies fetched from the API.
    /// </summary>
    private List<MovieResponseDto>? allMovies { get; set; }

    /// <summary>
    /// Stores the details of the movie list fetched from the API.
    /// </summary>
    private MoviesListResponseDto? movieList { get; set; }

    private MoviesListUpdateDto listUpdateDto = new();

    private EditContext? editContext;
    private bool isChanged = true;

    /// <summary>
    /// Fetches movie and list data from the API when the component initializes.
    /// Falls back to placeholder data if an error occurs.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch all movies from the API
            allMovies = await HttpClient.GetFromJsonAsync<List<MovieResponseDto>>(Nav.ToAbsoluteUri($"api/movies"));
            // Fetch the specific movie list from the API
            movieList = await HttpClient.GetFromJsonAsync<MoviesListResponseDto>(Nav.ToAbsoluteUri($"api/lists/{movieListId}"));
        }
        catch (Exception ex)
        {
            // Log the error and use placeholder data if the API call fails
            Console.WriteLine($"Error loading movies from API: {ex.Message}");
            allMovies = GetPlaceholderMovies();
            movieList = GetPlaceholderList();
        }
        if (movieList != null)
        {
            listUpdateDto.Title = movieList.Title;
            listUpdateDto.Movies = movieList.Movies;
            editContext = new EditContext(listUpdateDto);
            editContext.OnFieldChanged += (sender, eventArgs) => isChanged = false;
        }
    }


    /// <summary>
    /// Generates placeholder movie data for error fallback.
    /// </summary>
    /// <returns>A list of placeholder movies.</returns>
    private List<MovieResponseDto> GetPlaceholderMovies() => MockData.GetPlaceholderMovies();

    /// <summary>
    /// Generates placeholder movie list data for error fallback.
    /// </summary>
    /// <returns>A placeholder movie list.</returns>
    private MoviesListResponseDto GetPlaceholderList() => MockData.GetPlaceholderList();

    private void Share()
    {
        Nav.NavigateTo($"/list/{movieListId}");
    }

    @* Delete Modal *@
    private bool deleteModalVisible = false;
    private void ShowDeleteModal() => deleteModalVisible = true;
    private void CloseDeleteModal() => deleteModalVisible = false;

    private async Task HandleDeleteSubmit()
    {
        try
        {
            Console.WriteLine($"Deleting list {movieList?.Title}");
            var response = await HttpClient.DeleteAsync(Nav.ToAbsoluteUri($"api/lists/{movieList?.Id}"));

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error deleting list: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            CloseDeleteModal();
        }
    }

    @* Edit Modal *@
    private bool editModalVisible = false;
    private void ShowEditModal() => editModalVisible = true;
    private void CloseEditModal() => editModalVisible = false;

    private async Task HandleEditSubmit()
    {
        try
        {
            Console.WriteLine($"Updating list {movieList?.Title}");
            var response = await HttpClient.PutAsJsonAsync(Nav.ToAbsoluteUri($"api/lists/{movieList?.Id}"), listUpdateDto);

            if (response.IsSuccessStatusCode)
            {
                movieList = await response.Content.ReadFromJsonAsync<MoviesListResponseDto>();
                if (movieList != null)
                {
                    listUpdateDto.Title = movieList.Title;
                    listUpdateDto.Movies = movieList.Movies;
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating list: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            CloseEditModal();
        }
    }
}