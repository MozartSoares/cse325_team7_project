@using cse325_team7_project.Api.DTOs
@using cse325_team7_project.Domain.Enums
@using cse325_team7_project.Domain.ValueObjects
@inject HttpClient HttpClient

@if (movieList == null || allMovies == null)
{
    <p>Loading movies...</p>
}
else
{
    <div class="movie-list-container">
        <div class="movie-list-header">
            <span>@movieList.Title</span>
            <button class="movie-copy-button">Copy Link</button>
        </div>

        <div class="movie-list">
            @foreach (var id in movieList.Movies)
            {
                // Check if the movie ID matches any of the IDs in allMovies
                var movie = allMovies.FirstOrDefault(m => m.Id == id);
                if (movie != null) // Only render the MovieItem if there's a match
                {
                    <MovieItem movie=@movie />
                }
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string? movieListId { get; set; }
    private List<MovieResponseDto>? allMovies { get; set; }
    private MoviesListResponseDto? movieList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allMovies = await HttpClient.GetFromJsonAsync<List<MovieResponseDto>>($"api/movies");
            movieList = await HttpClient.GetFromJsonAsync<MoviesListResponseDto>($"api/lists/{movieListId}");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading movies from API: {ex.Message}");
            allMovies = GetPlaceholderMovies();
            movieList = GetPlaceholderList();
        }
    }

    private List<MovieResponseDto> GetPlaceholderMovies() => MockData.GetPlaceholderMovies();
    
    private MoviesListResponseDto GetPlaceholderList() => MockData.GetPlaceholderList();
}