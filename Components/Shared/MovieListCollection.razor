@using cse325_team7_project.Api.DTOs
@using cse325_team7_project.Components.Services
@using cse325_team7_project.Domain.Enums
@using cse325_team7_project.Domain.ValueObjects
@implements IDisposable
@inject HttpClient HttpClient
@inject NavigationManager Nav
@inject AuthStateService AuthState




@if (!isDeleted && !notFound)
{
    <div class="movie-list-container">
        <div class="movie-list-header">
            @if (movieList != null)
            {
            <span>@movieList.Title</span>
            <div class="list-action-buttons">
                @if (CanManageList)
                {
                    <button class="list-red-button" @onclick="ShowDeleteModal">Delete</button>
                    <button class="list-blue-button" @onclick="ShowEditModal">Edit</button>
                }
                <button class="list-blue-button" @onclick="Share">Share</button>
                </div>
            }
        </div>

        <div class="movie-list">
            @*
                Iterates through each movie ID in the list.
                For each ID, finds the matching movie in allMovies and renders a MovieItem component.
            *@
            @if (movieList != null && movieList.Movies != null && movieList.Movies.Any() && allMovies != null)
            {
                @foreach (var id in movieList.Movies)
                {
                    var movie = allMovies.FirstOrDefault(m => m.Id == id);
                    if (movie != null)
                    {
                        <div class="movie-list-item">
                            <MovieItem movie=@movie />
                            @if (CanManageList)
                            {
                                <div class="movie-inline-actions">
                                    <button class="list-red-button" @onclick="() => RemoveMovieFromList(movie.Id)">Remove</button>
                                    @if (IsAdmin)
                                    {
                                        <a class="list-blue-button" href="@($"/movies/{movie.Id}")">Edit Movie</a>
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            }
            else 
            {
                <p>There are no movies in the list.</p>
            }
        </div>
    </div>

    <Modal Title="Confirmation" AcceptText="Confirm" Show="@deleteModalVisible" OnDecline="CloseDeleteModal" OnAccept="HandleDeleteSubmit">
        <p>Do you want to delete the list "@movieList?.Title"?</p>
    </Modal>

    <Modal Title="Edit List" Show="@editModalVisible" OnDecline="CloseEditModal">
        @if (listUpdateDto != null && movieList != null)
        {
            <EditForm EditContext="@editContext" OnValidSubmit="HandleEditSubmit">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="listUpdateDto.Title" class="form-control" />
                    <ValidationMessage For="@(() => listUpdateDto.Title)" />
                </div>
                <button type="submit" class="btn btn-primary" disabled="@isChanged">Save</button>
            </EditForm>
        }
    </Modal>
}


@code {
    /// <summary>
    /// Gets or sets the ID of the movie list to display.
    /// </summary>
    /// <value>
    /// The unique identifier for the movie list, passed as a parameter.
    /// </value>
    [Parameter]
    public string? movieListId { get; set; }

    [Parameter]
    public EventCallback<string> OnDeleted { get; set; }

    /// <summary>
    /// Stores the full list of movies fetched from the API.
    /// </summary>
    private List<MovieResponseDto>? allMovies { get; set; }

    /// <summary>
    /// Stores the details of the movie list fetched from the API.
    /// </summary>
    private MoviesListResponseDto? movieList { get; set; }

    private MoviesListUpdateDto listUpdateDto = new();

    private EditContext? editContext;
    private bool isChanged = true;

    private bool isDeleted = false;
    private bool notFound = false;

    private bool IsAdmin => AuthState.CurrentUser?.Role == UserRole.Admin;
    private bool IsOwner => movieList is not null && AuthState.CurrentUser?.Lists?.Contains(movieList.Id) == true;
    private bool CanManageList => IsAdmin || IsOwner;

    protected override void OnInitialized()
    {
        AuthState.AuthStateChanged += HandleAuthStateChanged;
    }

    /// <summary>
    /// Fetches movie and list data from the API when the component initializes.
    /// Falls back to placeholder data if an error occurs.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await AuthState.EnsureInitializedAsync();

        try
        {
            // Fetch all movies from the API
            allMovies = await HttpClient.GetFromJsonAsync<List<MovieResponseDto>>(Nav.ToAbsoluteUri($"api/movies"));
            // Fetch the specific movie list from the API
            movieList = await HttpClient.GetFromJsonAsync<MoviesListResponseDto>(Nav.ToAbsoluteUri($"api/lists/{movieListId}"));
        }
        catch (Exception ex)
        {
            // If the list was deleted or not found, hide this component gracefully
            notFound = true;
            Console.WriteLine($"Error loading movies from API: {ex.Message}");
        }
        if (movieList != null)
        {
            listUpdateDto.Title = movieList.Title;
            listUpdateDto.Movies = movieList.Movies;
            editContext = new EditContext(listUpdateDto);
            editContext.OnFieldChanged += (sender, eventArgs) => isChanged = false;
        }
    }


    /// <summary>
    /// Generates placeholder movie data for error fallback.
    /// </summary>
    /// <returns>A list of placeholder movies.</returns>
    private List<MovieResponseDto> GetPlaceholderMovies() => MockData.GetPlaceholderMovies();

    /// <summary>
    /// Generates placeholder movie list data for error fallback.
    /// </summary>
    /// <returns>A placeholder movie list.</returns>
    private MoviesListResponseDto GetPlaceholderList() => MockData.GetPlaceholderList();

    private void Share()
    {
        Nav.NavigateTo($"/list/{movieListId}");
    }

    @* Delete Modal *@
    private bool deleteModalVisible = false;
    private void ShowDeleteModal()
    {
        if (!CanManageList)
        {
            return;
        }

        deleteModalVisible = true;
    }
    private void CloseDeleteModal() => deleteModalVisible = false;

    private async Task HandleDeleteSubmit()
    {
        if (!CanManageList)
        {
            CloseDeleteModal();
            return;
        }

        try
        {
            Console.WriteLine($"Deleting list {movieList?.Title}");
            var response = await HttpClient.DeleteAsync(Nav.ToAbsoluteUri($"api/lists/{movieList?.Id}"));

            if (response.IsSuccessStatusCode)
            {
                isDeleted = true;
                if (!string.IsNullOrWhiteSpace(movieListId))
                {
                    await OnDeleted.InvokeAsync(movieListId);
                }

                if (CanManageList && AuthState.CurrentUser is not null && !string.IsNullOrWhiteSpace(movieListId))
                {
                    var updatedLists = (AuthState.CurrentUser.Lists ?? new List<string>())
                        .Where(x => x != movieListId)
                        .ToList();
                    var updatedUser = AuthState.CurrentUser with
                    {
                        Lists = updatedLists
                    };
                    await AuthState.UpdateUserAsync(updatedUser);
                }
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error deleting list: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            CloseDeleteModal();
        }
    }

    @* Edit Modal *@
    private bool editModalVisible = false;
    private void ShowEditModal()
    {
        if (!CanManageList)
        {
            return;
        }

        editModalVisible = true;
    }
    private void CloseEditModal() => editModalVisible = false;

    private async Task HandleEditSubmit()
    {
        if (!CanManageList)
        {
            CloseEditModal();
            return;
        }

        try
        {
            Console.WriteLine($"Updating list {movieList?.Title}");
            var response = await HttpClient.PutAsJsonAsync(Nav.ToAbsoluteUri($"api/lists/{movieList?.Id}"), listUpdateDto);

            if (response.IsSuccessStatusCode)
            {
                movieList = await response.Content.ReadFromJsonAsync<MoviesListResponseDto>();
                if (movieList != null)
                {
                    listUpdateDto.Title = movieList.Title;
                    listUpdateDto.Movies = movieList.Movies;
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating list: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            CloseEditModal();
        }
    }

    private async Task RemoveMovieFromList(string movieId)
    {
        if (!CanManageList || string.IsNullOrWhiteSpace(movieId) || movieList is null)
        {
            return;
        }

        try
        {
            var update = new MoviesListUpdateDto
            {
                Title = movieList.Title,
                Movies = (movieList.Movies ?? new List<string>()).Where(id => id != movieId).ToList()
            };

            var response = await HttpClient.PutAsJsonAsync(Nav.ToAbsoluteUri($"api/lists/{movieList.Id}"), update);
            if (response.IsSuccessStatusCode)
            {
                movieList = await response.Content.ReadFromJsonAsync<MoviesListResponseDto>();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error removing movie from list: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void HandleAuthStateChanged()
    {
        _ = InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthState.AuthStateChanged -= HandleAuthStateChanged;
    }
}
