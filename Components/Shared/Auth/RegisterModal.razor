@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Text.Json
@using cse325_team7_project.Api.DTOs
@using cse325_team7_project.Domain.Enums
@inject AuthApiClient AuthApi
@inject AuthStateService AuthState
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<Modal Title="@Title" Show="Show" OnDecline="HandleDecline" DeclineText="Cancel">
    <EditForm Model="registerModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="auth-error">@errorMessage</div>
        }

        <div class="form-group">
            <label for="register-username">Username</label>
            <InputText id="register-username" class="form-control" @bind-Value="registerModel.Username" />
            <ValidationMessage For="@(() => registerModel.Username)" />
        </div>

        <div class="form-group">
            <label for="register-name">Name</label>
            <InputText id="register-name" class="form-control" @bind-Value="registerModel.Name" />
            <ValidationMessage For="@(() => registerModel.Name)" />
        </div>

        <div class="form-group">
            <label for="register-email">Email</label>
            <InputText id="register-email" class="form-control" @bind-Value="registerModel.Email" type="email" />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>

        <div class="form-group">
            <label for="register-password">Password</label>
            <InputText id="register-password" class="form-control" @bind-Value="registerModel.Password" type="password" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>

        <div class="form-group">
            <label for="register-confirm-password">Confirm Password</label>
            <InputText id="register-confirm-password" class="form-control" @bind-Value="registerModel.ConfirmPassword" type="password" />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
        </div>

        <button class="btn btn-primary w-100" type="submit" disabled="@isSubmitting">
            @(isSubmitting ? SubmittingButtonText : SubmitButtonText)
        </button>
    </EditForm>

    @if (ShowLoginSwitch)
    {
        <p class="auth-switch">
            Already have an account?
            <button class="link-button" @onclick="RequestLogin" type="button">Log in</button>
        </p>
    }
</Modal>

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnRegistrationSuccess { get; set; }
    [Parameter] public EventCallback OnSwitchToLogin { get; set; }
    [Parameter] public string Title { get; set; } = "Create your account";
    [Parameter] public string SubmitButtonText { get; set; } = "Create account";
    [Parameter] public string SubmittingButtonText { get; set; } = "Creating account...";
    [Parameter] public bool ShowLoginSwitch { get; set; } = true;
    [Parameter] public bool UseAdminCreationFlow { get; set; }

    private readonly RegisterModel registerModel = new();
    private string? errorMessage;
    private bool isSubmitting;

    private async Task HandleSubmit()
    {
        if (isSubmitting)
        {
            return;
        }

        errorMessage = null;
        isSubmitting = true;

        try
        {
            if (UseAdminCreationFlow)
            {
                await SubmitAdminCreationAsync();
            }
            else
            {
                await SubmitStandardRegistrationAsync();
            }
        }
        catch (ApiException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task SubmitStandardRegistrationAsync()
    {
        var dto = new AuthRegisterDto(
            registerModel.Username,
            registerModel.Name,
            registerModel.Email,
            registerModel.Password);

        var response = await AuthApi.RegisterAsync(dto);
        await AuthState.SetAuthAsync(response);
        await OnRegistrationSuccess.InvokeAsync();
        await CloseAsync();
    }

    private async Task SubmitAdminCreationAsync()
    {
        if (AuthState.CurrentUser?.Role != UserRole.Admin)
        {
            throw new ApiException(HttpStatusCode.Forbidden, "Only admins can create admin users.");
        }

        if (!await AuthState.ApplyAuthorizationAsync(HttpClient))
        {
            throw new ApiException(HttpStatusCode.Unauthorized, "You must be logged in to perform this action.");
        }

        var payload = new UserCreateAdminDto(
            registerModel.Username,
            registerModel.Name,
            registerModel.Email,
            registerModel.Password,
            UserRole.Admin);

        var response = await HttpClient.PostAsJsonAsync(
            Navigation.ToAbsoluteUri("api/users"),
            payload);

        if (!response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var message = TryExtractMessage(content) ?? "Unable to create admin account.";
            throw new ApiException(response.StatusCode, message, content);
        }

        await OnRegistrationSuccess.InvokeAsync();
        await CloseAsync();
    }

    private async Task HandleDecline()
    {
        await CloseAsync();
    }

    private async Task CloseAsync()
    {
        registerModel.Reset();
        errorMessage = null;
        await OnClose.InvokeAsync();
    }

    private async Task RequestLogin()
    {
        await CloseAsync();
        await OnSwitchToLogin.InvokeAsync();
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Username is required.")]
        [MinLength(3, ErrorMessage = "Username must be at least 3 characters.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Enter a valid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm your password.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        public void Reset()
        {
            Username = string.Empty;
            Name = string.Empty;
            Email = string.Empty;
            Password = string.Empty;
            ConfirmPassword = string.Empty;
        }
    }

    private static string? TryExtractMessage(string? rawContent)
    {
        if (string.IsNullOrWhiteSpace(rawContent))
        {
            return null;
        }

        try
        {
            using var doc = JsonDocument.Parse(rawContent);
            if (doc.RootElement.ValueKind == JsonValueKind.Object)
            {
                if (doc.RootElement.TryGetProperty("message", out var messageProp))
                {
                    return messageProp.GetString();
                }

                if (doc.RootElement.TryGetProperty("title", out var titleProp))
                {
                    return titleProp.GetString();
                }

                if (doc.RootElement.TryGetProperty("error", out var errorProp))
                {
                    return errorProp.GetString();
                }
            }
        }
        catch
        {
            // Ignore parse errors and fall back to default messaging.
        }

        return null;
    }
}
