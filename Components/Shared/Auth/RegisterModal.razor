@using System.ComponentModel.DataAnnotations
@using cse325_team7_project.Api.DTOs
@inject AuthApiClient AuthApi
@inject AuthStateService AuthState

<Modal Title="Create your account" Show="Show" OnDecline="HandleDecline" DeclineText="Cancel">
    <EditForm Model="registerModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="auth-error">@errorMessage</div>
        }

        <div class="form-group">
            <label for="register-username">Username</label>
            <InputText id="register-username" class="form-control" @bind-Value="registerModel.Username" />
            <ValidationMessage For="@(() => registerModel.Username)" />
        </div>

        <div class="form-group">
            <label for="register-name">Name</label>
            <InputText id="register-name" class="form-control" @bind-Value="registerModel.Name" />
            <ValidationMessage For="@(() => registerModel.Name)" />
        </div>

        <div class="form-group">
            <label for="register-email">Email</label>
            <InputText id="register-email" class="form-control" @bind-Value="registerModel.Email" type="email" />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>

        <div class="form-group">
            <label for="register-password">Password</label>
            <InputText id="register-password" class="form-control" @bind-Value="registerModel.Password" type="password" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>

        <div class="form-group">
            <label for="register-confirm-password">Confirm Password</label>
            <InputText id="register-confirm-password" class="form-control" @bind-Value="registerModel.ConfirmPassword" type="password" />
            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
        </div>

        <button class="btn btn-primary w-100" type="submit" disabled="@isSubmitting">
            @(isSubmitting ? "Creating account..." : "Create account")
        </button>
    </EditForm>

    <p class="auth-switch">
        Already have an account?
        <button class="link-button" @onclick="RequestLogin" type="button">Log in</button>
    </p>
</Modal>

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnRegistrationSuccess { get; set; }
    [Parameter] public EventCallback OnSwitchToLogin { get; set; }

    private readonly RegisterModel registerModel = new();
    private string? errorMessage;
    private bool isSubmitting;

    private async Task HandleSubmit()
    {
        if (isSubmitting)
        {
            return;
        }

        errorMessage = null;
        isSubmitting = true;

        try
        {
            var dto = new AuthRegisterDto(
                registerModel.Username,
                registerModel.Name,
                registerModel.Email,
                registerModel.Password);

            var response = await AuthApi.RegisterAsync(dto);
            await AuthState.SetAuthAsync(response);
            await OnRegistrationSuccess.InvokeAsync();
            await CloseAsync();
        }
        catch (ApiException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleDecline()
    {
        await CloseAsync();
    }

    private async Task CloseAsync()
    {
        registerModel.Reset();
        errorMessage = null;
        await OnClose.InvokeAsync();
    }

    private async Task RequestLogin()
    {
        await CloseAsync();
        await OnSwitchToLogin.InvokeAsync();
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Username is required.")]
        [MinLength(3, ErrorMessage = "Username must be at least 3 characters.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Enter a valid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm your password.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        public void Reset()
        {
            Username = string.Empty;
            Name = string.Empty;
            Email = string.Empty;
            Password = string.Empty;
            ConfirmPassword = string.Empty;
        }
    }
}
