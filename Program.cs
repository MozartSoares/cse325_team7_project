using cse325_team7_project.Components;
using cse325_team7_project.Api.Services;
using cse325_team7_project.Api.Services.Interfaces;
using cse325_team7_project.Domain.Models;
using MongoDB.Driver;

var builder = WebApplication.CreateBuilder(args);

// --- UI layer -----------------------------------------------------------------
// Register the Razor component stack generated by the Blazor template. Even though
// this backend now exposes REST controllers, we keep the interactive server-side UI
// so the existing front-end continues to function.
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents();

// --- API layer ----------------------------------------------------------------
// Enable controllers and insert our ObjectId binder at the front of the provider
// pipeline so every action parameter of type ObjectId benefits from automatic
// parsing and consistent 400 responses when malformed ids are supplied.
builder.Services.AddControllers(options =>
{
    options.ModelBinderProviders.Insert(0, new cse325_team7_project.Api.Binders.ObjectIdModelBinderProvider());
});

// --- Data layer ---------------------------------------------------------------
// Resolve MongoDB dependencies via DI. These registrations make the actual
// connection configuration explicit and keep services simple to test/mock.
builder.Services.AddSingleton<IMongoClient>(sp =>
{
    var config = sp.GetRequiredService<IConfiguration>();
    var cs = config["Mongo:ConnectionString"] ?? "mongodb://localhost:27017";
    return new MongoClient(cs);
});
builder.Services.AddSingleton(sp =>
{
    var config = sp.GetRequiredService<IConfiguration>();
    var dbName = config["Mongo:Database"] ?? "moviehub";
    return sp.GetRequiredService<IMongoClient>().GetDatabase(dbName);
});
builder.Services.AddSingleton<IMongoCollection<Movie>>(sp => sp.GetRequiredService<IMongoDatabase>().GetCollection<Movie>("movies"));
builder.Services.AddSingleton<IMongoCollection<User>>(sp => sp.GetRequiredService<IMongoDatabase>().GetCollection<User>("users"));
builder.Services.AddSingleton<IMongoCollection<MoviesList>>(sp => sp.GetRequiredService<IMongoDatabase>().GetCollection<MoviesList>("lists"));

// --- Domain services ----------------------------------------------------------
// Register our CRUD services at scoped lifetime so each HTTP request gets its own
// instance while still leveraging the shared Mongo collections above.
builder.Services.AddScoped<IMovieService, MovieService>();
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<IMoviesListService, MoviesListService>();

var app = builder.Build();

// --- HTTP pipeline ------------------------------------------------------------
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error", createScopeForErrors: true);
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();

// Catch HttpException and other failures early so controllers can stay lean.
app.UseMiddleware<cse325_team7_project.Api.Middleware.ErrorHandlingMiddleware>();


app.UseAntiforgery();

app.MapStaticAssets();
app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode();

app.MapControllers();

app.Run();
